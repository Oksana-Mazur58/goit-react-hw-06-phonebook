{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/phonebook/phonebook-actions.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","contacts-list.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContacts","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","getFilteredContacts","allContacts","filter","normalizedFilter","toLowerCase","contacts","includes","connect","items","filteredContacts","dispatch","onDeleteContact","contactsActions","className","map","onClick","ContactForm","static","onSubmit","PropTypes","func","isRequired","state","handleChangeName","e","setState","currentTarget","value","handleChangeNumber","handleSubmit","preventDefault","props","reset","this","ContactFormStyle","Contacts__form","type","pattern","title","required","onChange","ContactForm__button","Component","phonebookActions","onChangeFilter","target","FilterStyle","Filter__aria","Filter__input","App","uuidv4","createReducer","actions","alert","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PURGE","PAUSE","PERSIST","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b02dc183.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contacts__form\":\"ContactForm_Contacts__form__3DegS\",\"ContactForm__button\":\"ContactForm_ContactForm__button__3ySrh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter__aria\":\"Filter_Filter__aria__3KiKb\",\"Filter__input\":\"Filter_Filter__input__o7rLx\"};","// import types from './phonebook-types'\r\nimport shortid from 'shortid'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\n\r\nconst addContacts = createAction('contacts/add', (name, number) => {\r\n    return {\r\n        payload: {\r\n       id: shortid.generate(),\r\n       name,\r\n       number,   \r\n        }\r\n  }  \r\n})\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/changeFilter')\r\n// const addContacts = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name,\r\n//         number,\r\n\r\n//     }\r\n// });\r\n// const deleteContact = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//     type: types.changeFilter,\r\n//     payload: value\r\n// })\r\nexport default { addContacts, deleteContact, changeFilter }","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/phonebook/phonebook-actions\";\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactsList = ({ filteredContacts, onDeleteContact }) => (\r\n  <ul className=\"contact-list\">\r\n    {filteredContacts.map(({ name, number, id }) => (\r\n      <li key={id} className=\"contact-item\">\r\n        <span className=\"contact-name\">{name} : </span>\r\n        <span className=\"contact-number\"> {number}</span>\r\n        <button\r\n          className=\"button contact-item__button\"\r\n          onClick={() => onDeleteContact(id)}\r\n        >\r\n          Удалить\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nconst getFilteredContacts = (allContacts, filter) => {\r\n  // const { filter, contacts } = this.state;\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter((contacts) =>\r\n    contacts.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  filteredContacts: getFilteredContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);","import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport ContactFormStyle from './ContactForm.module.css'\r\nimport PropTypes, { number } from 'prop-types';\r\nimport { connect } from 'react-redux'\r\nimport phonebookActions from '../../redux/phonebook/phonebook-actions'\r\n\r\nclass ContactForm extends Component {\r\n    static = {\r\n        onSubmit: PropTypes.func.isRequired\r\n    }\r\n\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n\r\n\r\n    handleChangeName = e => {\r\n        this.setState({ name: e.currentTarget.value })\r\n    }\r\n    handleChangeNumber = e => {\r\n        this.setState({ number: e.currentTarget.value })\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        const { name, number }= this.state\r\n        // if (name !== '' && number !== '') {\r\n        this.props.onSubmit(name, number)\r\n        this.reset()  \r\n        // }\r\n        // alert ('Please add name and phone number')\r\n        \r\n\r\n    }\r\n\r\n    reset() {\r\n        this.setState({ name: '', number: '' });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form className={ContactFormStyle.Contacts__form} onSubmit={this.handleSubmit}>\r\n                <p>Name</p>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={this.state.name}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={this.handleChangeName}\r\n\r\n                />\r\n                <p>Number</p>\r\n\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    value={this.state.number}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={this.handleChangeNumber}\r\n                />\r\n                <button type=\"submit\" className={ContactFormStyle.ContactForm__button}>Add contact</button>\r\n\r\n            </form>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onSubmit: (name, number) => dispatch(phonebookActions.addContacts(name, number))\r\n})\r\nexport default connect(null, mapDispatchToProps)(ContactForm)","import React from 'react';\r\nimport FilterStyle from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport phonebookActions from '../../redux/phonebook/phonebook-actions'\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n    <label className={FilterStyle.Filter__aria}>\r\n        Find contacts by name\r\n        <input type='text' value={value} onChange={onChangeFilter}\r\n            className={FilterStyle.Filter__input}>\r\n        </input>\r\n    </label>\r\n)\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: state.contacts.filter,\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onChangeFilter: e => dispatch(phonebookActions.changeFilter(e.target.value))\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Filter)\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChangeFilter: PropTypes.func.isRequired\r\n}\r\n","\nimport React, { Component } from \"react\";\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter'\n\n\n\n\nclass App extends Component {\n  // state = {\n  //   contacts: contacts,\n  //   filter: '',\n\n\n  // }\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts')\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts })\n  //   }\n\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n  //   }\n\n  // }\n\n  // addContact = (name, number) => {\n  //   const contact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   }\n  //   const contactNames = this.state.contacts.map(contact => contact.name);\n  //   this.renderContacts(contactNames, contact.name, contact);\n\n  // }\n  // renderContacts = (contactList, contactName, newContact) => {\n  //   if (contactList.includes(contactName)) {\n  //     alert(`${contactName} is already in contacts`)\n  //   } else {\n  //     this.setState(({ contacts }) => ({\n  //       contacts: [...contacts, newContact],\n  //     }));\n  //   };\n  // };\n\n\n  // changeFilter = e => {\n  //   this.setState({ filter: e.currentTarget.value })\n  // }\n\n\n  // deleteContact = (contactId) => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n\n  //   }))\n  // }\n\n  render() {\n    // const { contacts, filter } = this.state;\n    // const visibleContacts = this.getVisibleContacts\n    return (\n\n      <div>\n        <h1>PhoneBook</h1>\n        <ContactForm />\n        <h1>Contacts </h1>\n        <Filter/>\n        <ContactList/>\n          {/* // filterContacts={this.getFilteredContacts}\n          // onDeleteContact={this.deleteContact} /> */}\n      </div>\n\n\n    )\n  }\n\n}\nexport default App;\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nconst contacts = [{ id: uuidv4(), name: 'Rosie Simpson', number: '459-12-56' },\r\n{ id: uuidv4(), name: 'Hermione Kline', number: '443-89-12' },\r\n{ id: uuidv4(), name: 'Eden Clements', number: '645-17-79' },\r\n{ id: uuidv4(), name: 'Annie Copeland', number: '227-91-26' }\r\n];\r\n\r\nexport default  contacts","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport actions from \"./phonebook-actions\";\r\n// import types from \"./contacts-types\";\r\nimport contacts from \"../../contacts-list\";\r\n\r\n\r\n\r\n// const names = [\r\n  // ([] = names)\r\n//   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n//   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n//   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n// ];\r\n\r\nconst items = createReducer(contacts, {\r\n  [actions.addContacts]: (state, { payload }) => {\r\n    if (state.map(({ name }) => name).includes(payload.name)) {\r\n      return alert(`${payload.name} is already in contacts`);\r\n    } \r\n      return [payload, ...state];\r\n  },\r\n\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n\r\n// const contacts = (state =  contactsDefault, { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload];\r\n        \r\n//         case types.DELETE:\r\n//             return state.filter(contact=>contact.id !==payload)\r\n//         default:\r\n//             return state;\r\n//     }\r\n\r\n// }\r\n// const filter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.CHANGE_FILTER:\r\n//             return  payload;\r\n        \r\n//         case types.DELETE:\r\n//             return state.filter(contact=>contact.id !==payload)\r\n//         default:\r\n//             return state;\r\n//     }\r\n\r\n// }\r\n\r\n","// import { combineReducers } from \"redux\";\r\nimport {\r\n    persistStore, persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' \r\nimport { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger'\r\nimport contactReducer from './phonebook/phonebook-reducer'\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PURGE, PAUSE,PERSIST,REGISTER]\r\n        }\r\n    }), logger];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n    storage,\r\n   blacklist: ['filter']\r\n}\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n     contacts: persistReducer(contactsPersistConfig, contactReducer) \r\n},\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === \"development\",\r\n    \r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport default { store, persistor }\r\n// const rootReducer = combineReducers({\r\n//     phoneContacts: contactReducer\r\n// })\r\n\r\n// const initialState = {}\r\n// const reducer = (state = initialState, action) => {\r\n//     return state\r\n// };\r\n// const store = createStore(rootReducer, composeWithDevTools())\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import {BrouserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux'\nimport 'modern-normalize/modern-normalize.css';\nimport { PersistGate } from 'redux-persist/integration/react'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n    \n        <App />\n       \n        </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}